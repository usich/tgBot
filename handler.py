from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import KeyboardButton

from bot import bot, dp
from dbconn import cursor, conn
from get_data import check_backup_local, check_backup_yadisk


async def handler():
    class Form(StatesGroup):
        message = State()

    @dp.message_handler(state=Form.message)
    async def process_message(message: types.Message, state: FSMContext):

        await state.finish()

        cursor.execute("SELECT chat_id from users  WHERE role <> 'orl'")

        sender = message.from_user.first_name

        for i in cursor.fetchall():
            await bot.send_message(i[0], f"<i>{sender}:</i>\n "
                                         f"{message.text}",
                                   parse_mode=types.ParseMode.HTML)

    @dp.message_handler(commands=['start'])
    async def send_welcome(msg: types.Message):
        cursor.execute(f"SELECT * from users where chat_id = {int(msg.chat.id)}")
        if len(cursor.fetchall()) == 0:
            cursor.execute(f'''INSERT INTO users(user_name, chat_id)
            VALUES("{msg.from_user.first_name}", {msg.chat.id});''')
            conn.commit()
        cursor.execute(f'SELECT chat_id from users where active = 1 and chat_id = {int(msg.chat.id)}')
        temp = len(cursor.fetchall())
        if temp == 0:
            await msg.answer('–ü—Ä–∏–≤–µ—Ç—Å–≤—É—é! ‚úåÔ∏è\n'
                             '–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã, –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏. ‚òù \n'
                             '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω—É. ü§ô')
        else:
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            b1 = KeyboardButton('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤ üì•')
            b2 = KeyboardButton('–£–∑–Ω–∞—Ç—å –º–æ–π —Å—Ç–∞—Ç—É—Å üôà')
            # b3 = KeyboardButton('–ò–Ω—Ñ–æ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö ‚úÖ')
            b4 = KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç üì®')
            keyboard.add(b1).add(b2).add(b4)

            await msg.answer("–í—ã–±–µ—Ä–µ—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å", reply_markup=keyboard)

    @dp.message_handler(content_types=['text'])
    async def get_list_backup(msg: types.Message):
        cursor.execute(f'SELECT chat_id from users where active = 1 and chat_id = {int(msg.chat.id)}')
        temp = len(cursor.fetchall())
        if temp == 0:
            await msg.answer('–ü—Ä–∏–≤–µ—Ç—Å–≤—É—é! ‚úåÔ∏è\n'
                             '–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã, –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏. ‚òù \n'
                             '–û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω—É. ü§ô')
            return True
        # if msg.text.lower() == '–∏–Ω—Ñ–æ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö ‚úÖ':
        #     keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        #     b1 = KeyboardButton('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü üìä')
        #     b2 = KeyboardButton('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–Ω–µ–π üìä')
        #     b3 = KeyboardButton('–ù–∞–∑–∞–¥ ‚§¥Ô∏è')
        #     keyboard.add(b1).add(b2).add(b3)
        #
        #     await msg.answer("–í—ã–±–µ—Ä–µ—Ç–µ –ø–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞...", reply_markup=keyboard)
        #
        # elif msg.text.lower() == '–Ω–∞–∑–∞–¥ ‚§¥Ô∏è':
        #
        #     keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        #     b1 = KeyboardButton('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤ üì•')
        #     b2 = KeyboardButton('–£–∑–Ω–∞—Ç—å –º–æ–π —Å—Ç–∞—Ç—É—Å üôà')
        #     b3 = KeyboardButton('–ò–Ω—Ñ–æ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö ‚úÖ')
        #     b4 = KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç üì®')
        #     keyboard.add(b1).add(b2).add(b3).add(b4)
        #
        #     await msg.answer("–í—ã–±–µ—Ä–µ—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å", reply_markup=keyboard)

        if msg.text.lower() == '–ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤ üì•':
            data = await check_backup_local()
            data_ya = await check_backup_yadisk()
            await msg.answer(data)

            await msg.answer(data_ya)

        elif msg.text.lower() == '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç üì®':
            '''–°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ —É–≤–∏–¥—è—Ç –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –±–æ—Ç–∞'''
            await Form.message.set()
            await msg.reply('–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')

        elif msg.text.lower() == '—É–∑–Ω–∞—Ç—å –º–æ–π —Å—Ç–∞—Ç—É—Å üôà':
            cursor.execute(f"SELECT * from users where chat_id = {int(msg.chat.id)}")
            result = cursor.fetchall()
            if len(result) == 0:
                await msg.answer('–í–∞—Å –Ω–µ—Ç –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω—É ü§∑')
            else:
                active = result[0][4]
                group = result[0][3]
                await msg.answer(f'‚ùáÔ∏è<b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:–≤—ã–∞—Ñ—ã–∞–≤—ã—Ñ –≤–∞—ã—Ñ–∞</b> <i>{bool(active)}</i> \n\n'
                                 f'‚ùáÔ∏è<b>–ì—Ä—É–ø–ø–∞:</b> <i>{group}</i>', parse_mode=types.ParseMode.HTML)

        # elif msg.text.lower() == '–ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü üìä':
        #
        #     str_prettify = await get_jira_task('every_month')
        #     for i in str_prettify.split('        '):
        #         await msg.answer(i, parse_mode=types.ParseMode.HTML)
        #
        # elif msg.text.lower() == '–ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–Ω–µ–π üìä':
        #
        #     str_prettify = await get_jira_task('every_week')
        #     for i in str_prettify.split('        '):
        #         await msg.answer(i, parse_mode=types.ParseMode.HTML)

        else:
            await msg.answer('–ù–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç.')
